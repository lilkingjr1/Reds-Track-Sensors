// Sensor Mount NL2 Script
// David Wolfe (Red-Thirten)
// 8/15/2021
// Initializes the sensor mount by snapping it to the closest track, and adjusting relative to that, if specified. Also handles special track movement.
// Licensed under GNU GPLv3 - See LICENSE for more details.

import com.nolimitscoaster.Script;
import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.SceneObjectElement;
import com.nolimitscoaster.TrackPos;
import nlvm.math3d.Vector3f;
import nlvm.lang.Math;

public class SensorMount extends Script{
	protected String SCRIPT_NAME = "Sensor Mount";			// Name of script for debugging
	public static String MOUNT_ELEMENT_NAME = "mount";		// Mount element name
	protected float TRACK_SEARCH_DIST = 5.f;				// Minimum distance (meters) the mount needs to be near the track to snap
	private static final int[] INVERTED_COASTERS = {2, 4, 14, 15, 16, 23}; // All inverted coaster IDs in NL2, as of this file's creation date
	
	private SpecialTrackModule specialTrackLogic;
	
	private bool initSuccessful = true;
	
	public bool onInit(){ // On initialization of Play simulation
		// Get and assign local sco
		SceneObject sco = getScoFromParentEntity();
		
		// Get element, and fail if invalid.
		SceneObjectElement mount = getElementOnScoForName(sco, MOUNT_ELEMENT_NAME);
		if (!initSuccessful){ return false; } // Catch initialization failures.
		
		// Snap SCO to closest track piece if possible, and adjust sub-assembly mount element attributes as specified.
		// This keeps all matrix adjustments relative to the track position and angle.
		if (sco.getBooleanParameter("enable_track_snap").boolValue()){ // Snap to track if enabled
			TrackPos trackPos = sim.findNearestCoasterTrack(sco.getTranslation(), TRACK_SEARCH_DIST);
			if (trackPos != null){
				Vector3f scoScaleOrig = sco.getScale(); // Store original SCO scale
				sco.setMatrix(trackPos.getCenterRailsMatrix()); // Set SCO matrix to CoR matrix
				sco.setScale(scoScaleOrig); // Restore original SCO scale
				mount.setTranslation( // Set mount translation based on parameters (centimeters to meters)
					sco.getDoubleParameter("mount_trans_x").floatValue() / 100,
					sco.getDoubleParameter("mount_trans_y").floatValue() / 100,
					sco.getDoubleParameter("mount_trans_z").floatValue() / 100
				);
				// If the snap-to coaster is an inverted style, set zRotation to flip SCO to correct orientation
				float zRotation = 0.f;
				for (int i = 0; i < INVERTED_COASTERS.length; i++){
					if (INVERTED_COASTERS[i] == trackPos.getCoaster().getCoasterStyleId()){
						zRotation = (float) Math.toRadians(180);
						break;
					}
				}
				// Set Y axis rotation as specified
				mount.setRotation(0.f, (float) Math.toRadians(sco.getIntegerParameter("mount_rot_y").doubleValue()), zRotation);
			}
			else{ // Track not found within search distance
				if (sco.getName().length() > 0){
					System.out.println(sco.getName() + ": Coaster track was not found within " + TRACK_SEARCH_DIST + " meters. Defaulting to original position.");
				}
				else{
					System.out.println(SCRIPT_NAME + ": Coaster track was not found within " + TRACK_SEARCH_DIST + " meters. Defaulting to original position.");
				}
			}
		}
		
		// If set to attach to special track, set up the logic object for it
		if (sco.getSpecialTrackParameter("special_track") != null){
			specialTrackLogic = new SpecialTrackModule(sco);
		}
		return true;
	}
	
	private SceneObject getScoFromParentEntity(){ // Returns the SceneObject via the parent entity ID with error handling
        SceneObject sco = sim.getSceneObjectForEntityId(getParentEntityId());
        if (sco == null){
			initSuccessful = false;
            System.err.println(SCRIPT_NAME + ": This script only works with NL2 scene objects");
        }
        return sco;
    }
	
	private SceneObjectElement getElementOnScoForName(SceneObject sco, String name){ // Basically getElementForName() with error handling - Gratz to bestdani for idea
        SceneObjectElement element = sco.getElementForName(name);
        if (element == null){
			initSuccessful = false;
            System.err.println(SCRIPT_NAME + ": Wrong 3d model loaded (Cannot find \"" + name + "\" element)");
        }
        return element;
    }
	
	public void onNextFrame(float tick){
		if (specialTrackLogic != null){ // If set to attach to special track, set translation of SCO
			specialTrackLogic.setTranslation();
		}
	}
}